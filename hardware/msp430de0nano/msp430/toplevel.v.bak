`include "openMSP430_defines.v"

module toplevel (
	CLOCK_50,
	LEDG,
	LEDR,
	KEY,
	SW,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7
	
	DEBUG_UART_TX,
	DEBUG_UART_RX,
		   
	USER_UART_TX,
	USER_UART_RX
);

	input 		     [3:0]		KEY,
	input 		    [17:0]		SW,
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,
   output 						USER_UART_TX;
   input  						USER_UART_RX;
   output 						DEBUG_UART_TX;
   input  						DEBUG_UART_RX;

   input 		          		CLOCK_50;
	output [8:0] 				LEDG;
	output [17:0] 				LEDR;
	input [3:0] 				KEY;
      
   wire 						clk_sys;
      
   // openMSP430 output buses
   wire [13:0] 					per_addr;
   wire [15:0] 					per_din;
   wire [1:0] 					per_we;
   wire [`DMEM_MSB:0] 			dmem_addr;
   wire [15:0] 					dmem_din;
   wire [1:0] 					dmem_wen;
   wire [`PMEM_MSB:0] 			pmem_addr;
   wire [15:0] 					pmem_din;
   wire [1:0] 					pmem_wen;
   wire [13:0] 					irq_acc;

   // openMSP430 input buses
   wire [13:0] 					irq_bus;
   wire [15:0] 					per_dout;
   wire [15:0] 					dmem_dout;
   wire [15:0] 					pmem_dout;
   
   // GPIO
   wire [7:0] 					p1_din;
   wire [7:0] 					p1_dout;
   wire [7:0] 					p1_dout_en;
   wire [7:0] 					p1_sel;

   wire [7:0] 					p2_dout;
   wire [7:0] 					p2_dout_en;
   wire [7:0] 					p2_sel;
   
   wire [7:0] 					p3_dout;
   wire [7:0] 					p3_dout_en;
   wire [7:0] 					p3_sel;
   
   wire [7:0] 					p4_dout;
   wire [7:0] 					p4_dout_en;
   wire [7:0] 					p4_sel;
   
   wire [7:0] 					p5_dout;
   wire [7:0] 					p5_dout_en;
   wire [7:0] 					p5_sel;
   
   wire [7:0] 					p6_dout;
   wire [7:0] 					p6_dout_en;
   wire [7:0] 					p6_sel;
   
   wire [15:0] 					per_dout_dio;

   // Timer A
   wire [15:0] 					per_dout_tA;

   // UART
   wire [15:0] 	                per_dout_uart;

   // Others
   wire 					    reset_pin;   
   wire 					    reset_pin_n = KEY[0];    // resets

   assign reset_n = reset_pin_n;
   assign clk_sys = CLOCK_50;

   reg [23:0] 					heartbeat;

   always @(posedge clk_sys, negedge reset_n)
     if (reset_n == 1'b0)
       heartbeat <= 24'b0;
     else
       heartbeat <= heartbeat + 1'b1;

   assign LEDR[17] = heartbeat[23];
   
   openMSP430 openMSP430_0 (			    
			    // OUTPUTs
		       	.aclk              (),             // ASIC ONLY: ACLK
       			.aclk_en           (aclk_en),      // FPGA ONLY: ACLK enable
			    .dbg_freeze        (dbg_freeze),   // Freeze peripherals
			    .dbg_i2c_sda_out   (),             // Debug interface: I2C SDA OUT
			    .dbg_uart_txd      (DEBUG_UART_TX), // Debug interface: UART TXD
			    .dco_enable        (),             // ASIC ONLY: Fast oscillator enable
			    .dco_wkup          (),             // ASIC ONLY: Fast oscillator wake-up (asynchronous)
			    .dmem_addr         (dmem_addr),    // Data Memory address
			    .dmem_cen          (dmem_cen),     // Data Memory chip enable (low active)
			    .dmem_din          (dmem_din),     // Data Memory data input
			    .dmem_wen          (dmem_wen),     // Data Memory write enable (low active)
			    .irq_acc           (irq_acc),      // Interrupt request accepted (one-hot signal)
			    .lfxt_enable       (),             // ASIC ONLY: Low frequency oscillator enable
			    .lfxt_wkup         (),             // ASIC ONLY: Low frequency oscillator wake-up (asynchronous)
			    .mclk              (mclk),         // Main system clock
			    .dma_dout          (),             // Direct Memory Access data output
			    .dma_ready         (),             // Direct Memory Access is complete
			    .dma_resp          (),             // Direct Memory Access response (0:Okay / 1:Error)
			    .per_addr          (per_addr),     // Peripheral address
			    .per_din           (per_din),      // Peripheral data input
			    .per_we            (per_we),       // Peripheral write enable (high active)
			    .per_en            (per_en),       // Peripheral enable (high active)
			    .pmem_addr         (pmem_addr),    // Program Memory address
			    .pmem_cen          (pmem_cen),     // Program Memory chip enable (low active)
			    .pmem_din          (pmem_din),     // Program Memory data input (optional)
			    .pmem_wen          (pmem_wen),     // Program Memory write enable (low active) (optional)
			    .puc_rst           (puc_rst),      // Main system reset
			    .smclk             (),             // ASIC ONLY: SMCLK
			    .smclk_en          (smclk_en),     // FPGA ONLY: SMCLK enable
			    
			    // INPUTs
			    .cpu_en            (1'b1),         // Enable CPU code execution (asynchronous and non-glitchy)
			    .dbg_en            (1'b1),         // Debug interface enable (asynchronous and non-glitchy)
			    .dbg_i2c_addr      (7'h00),        // Debug interface: I2C Address
			    .dbg_i2c_broadcast (7'h00),        // Debug interface: I2C Broadcast Address (for multicore systems)
			    .dbg_i2c_scl       (1'b1),         // Debug interface: I2C SCL
			    .dbg_i2c_sda_in    (1'b1),         // Debug interface: I2C SDA IN
			    .dbg_uart_rxd      (DEBUG_UART_RX), // Debug interface: UART RXD (asynchronous)
			    .dco_clk           (clk_sys),      // Fast oscillator (fast clock)
			    .dmem_dout         (dmem_dout),    // Data Memory data output
			    .irq               (irq_bus),      // Maskable interrupts
			    .lfxt_clk          (1'b0),         // Low frequency oscillator (typ 32kHz)
			    .dma_addr          (15'h0000),     // Direct Memory Access address
			    .dma_din           (16'h0000),     // Direct Memory Access data input
			    .dma_en            (1'b0),         // Direct Memory Access enable (high active)
			    .dma_priority      (1'b0),         // Direct Memory Access priority (0:low / 1:high)
			    .dma_we            (2'b00),        // Direct Memory Access write byte enable (high active)
			    .dma_wkup          (1'b0),         // ASIC ONLY: DMA Sub-System Wake-up (asynchronous and non-glitchy)
			    .nmi               (nmi),          // Non-maskable interrupt (asynchronous)
			    .per_dout          (per_dout),     // Peripheral data output
			    .pmem_dout         (pmem_dout),    // Program Memory data output
			    .reset_n           (reset_n),      // Reset Pin (low active, asynchronous and non-glitchy)
			    .scan_enable       (1'b0),         // ASIC ONLY: Scan enable (active during scan shifting)
			    .scan_mode         (1'b0),         // ASIC ONLY: Scan mode
			    .wkup              (1'b0)          // ASIC ONLY: System Wake-up (asynchronous and non-glitchy)             
			    );
   
   omsp_gpio #(.P1_EN(1),
               .P2_EN(1),
               .P3_EN(1),
               .P4_EN(1),
               .P5_EN(1),
               .P6_EN(1)) gpio_0 (
				  // OUTPUTs
				  .irq_port1    (irq_port1),     
				  .irq_port2    (irq_port2),     
				  .p1_dout      (p1_dout),       
				  .p1_dout_en   (p1_dout_en),    
				  .p1_sel       (p1_sel),        
				  .p2_dout      (p2_dout),       
				  .p2_dout_en   (p2_dout_en),    
				  .p2_sel       (p2_sel),        
				  .p3_dout      (p3_dout),              
				  .p3_dout_en   (p3_dout_en),    
				  .p3_sel       (p3_sel),        
				  .p4_dout      (p4_dout),              
				  .p4_dout_en   (p4_dout_en),              
				  .p4_sel       (p4_sel),              
				  .p5_dout      (p5_dout),              
				  .p5_dout_en   (p5_dout_en),              
				  .p5_sel       (p5_sel),              
				  .p6_dout      (p6_dout),              
				  .p6_dout_en   (p6_dout_en),              
				  .p6_sel       (p6_sel),              
				  .per_dout     (per_dout_dio),  
				  
				  // INPUTs
				  .mclk         (mclk),          
				  .p1_din       (p1_din),        
				  .p2_din       (),        
				  .p3_din       (),              
				  .p4_din       (),         
				  .p5_din       (),         
				  .p6_din       (),         
				  .per_addr     (per_addr),      
				  .per_din      (per_din),       
				  .per_en       (per_en),        
				  .per_we       (per_we),        
				  .puc_rst      (puc_rst)        
				  );
   
   
   omsp_timerA timerA_0 (
			 
			 // OUTPUTs
			 .irq_ta0      (irq_ta0),       
			 .irq_ta1      (irq_ta1),       
			 .per_dout     (per_dout_tA),   
			 .ta_out0      (ta_out0),       
			 .ta_out0_en   (ta_out0_en),    
			 .ta_out1      (ta_out1),       
			 .ta_out1_en   (ta_out1_en),    
			 .ta_out2      (ta_out2),       
			 .ta_out2_en   (ta_out2_en),    
			 
			 // INPUTs
			 .aclk_en      (aclk_en),       
			 .dbg_freeze   (dbg_freeze),    
			 .inclk        (inclk),         
			 .irq_ta0_acc  (irq_acc[9]),    
			 .mclk         (mclk),          
			 .per_addr     (per_addr),      
			 .per_din      (per_din),       
			 .per_en       (per_en),        
			 .per_we       (per_we),        
			 .puc_rst      (puc_rst),       
			 .smclk_en     (smclk_en),      
			 .ta_cci0a     (ta_cci0a),      
			 .ta_cci0b     (ta_cci0b),      
			 .ta_cci1a     (ta_cci1a),      
			 .ta_cci1b     (1'b0),          
			 .ta_cci2a     (ta_cci2a),      
			 .ta_cci2b     (1'b0),          
			 .taclk        (taclk)              
			 );
   
   
  //------ USER UART (mapped to UART1) ------
   omsp_uart #(.BASE_ADDR(15'h0080)) 
   uart_0 (
	   .irq_uart_rx  (irq_uart_rx),   // UART receive interrupt
	   .irq_uart_tx  (irq_uart_tx),   // UART transmit interrupt
	   .per_dout     (per_dout_uart), // Peripheral data output
	   .uart_txd     (USER_UART_TX),   // UART Data Transmit (TXD)
	   .mclk         (mclk),          // Main system clock
	   .per_addr     (per_addr),      // Peripheral address
	   .per_din      (per_din),       // Peripheral data input
	   .per_en       (per_en),        // Peripheral enable (high active)
	   .per_we       (per_we),        // Peripheral write enable (high active)
	   .puc_rst      (puc_rst),       // Main system reset
	   .smclk_en     (smclk_en),      // SMCLK enable (from CPU)
	   .uart_rxd     (USER_UART_RX)   // UART Data Receive (RXD)
	   );
			 
   assign per_dout = per_dout_dio  |
                     per_dout_tA   |
					 per_dout_uart;
					 
   assign nmi        =  1'b0;
   assign irq_bus    = {1'b0,         // Vector 13  (0xFFFA)
			1'b0,         // Vector 12  (0xFFF8)
			1'b0,         // Vector 11  (0xFFF6)
			1'b0,         // Vector 10  (0xFFF4) - Watchdog -
			irq_ta0,      // Vector  9  (0xFFF2)
			irq_ta1,      // Vector  8  (0xFFF0)
			irq_uart_rx,  // Vector  7  (0xFFEE)
			irq_uart_tx,  // Vector  6  (0xFFEC)
			1'b0,         // Vector  5  (0xFFEA)
			1'b0,         // Vector  4  (0xFFE8)
			irq_port2,    // Vector  3  (0xFFE6)
			irq_port1,    // Vector  2  (0xFFE4)
			1'b0,         // Vector  1  (0xFFE2)
			1'b0};        // Vector  0  (0xFFE0)
   
   ram16x5120 ram (
		   .address (dmem_addr[12:0]),
		   .clken   (~dmem_cen),
		   .clock   (clk_sys),
		   .data    (dmem_din[15:0]),
		   .q       (dmem_dout[15:0]),
		   .wren    ( ~(&dmem_wen[1:0]) ),
		   .byteena ( ~dmem_wen[1:0] )
		   );
   
   ram16x27648 rom (
		   .address (pmem_addr[15:0]),
		   .clken   (~pmem_cen),
		   .clock   (clk_sys),
		   .q       (pmem_dout ),
		   .wren    (~(&pmem_wen[1:0]) ),
		   .byteena (2'b11)
		   );

   assign p1_din      = {5'b0,KEY[3],KEY[2],KEY[1]};

   assign LEDG[7:0]  = p1_dout & p1_dout_en;
   assign LEDR[7:0]  = p2_dout & p2_dout_en;

   assign LEDR[15:8] = 8'h0;
   assign LEDR[16] = 1'b0;
   assign LEDG[8] = 1'b0;
   assign LEDR[17] = heartbeat[23];

   hexdecoder HEXD0(p3_dout[3:0] & p3_dout_en[3:0], HEX0);
   hexdecoder HEXD1(p3_dout[7:4] & p3_dout_en[7:4], HEX1);
   hexdecoder HEXD2(p4_dout[3:0] & p4_dout_en[3:0], HEX2);
   hexdecoder HEXD3(p4_dout[7:4] & p4_dout_en[7:4], HEX3);
   hexdecoder HEXD4(p5_dout[3:0] & p5_dout_en[3:0], HEX4);
   hexdecoder HEXD5(p5_dout[7:4] & p5_dout_en[7:4], HEX5);
   hexdecoder HEXD6(p6_dout[3:0] & p6_dout_en[3:0], HEX6);
   hexdecoder HEXD7(p6_dout[7:4] & p6_dout_en[7:4], HEX7);
   
endmodule
